local function button_unpress(button)
	gui.set_enabled(gui.get_node(button .. "/button_down"), false)
	gui.set_enabled(gui.get_node(button .. "/button_up"), true)
end

local function button_press(button)
	gui.set_enabled(gui.get_node(button .. "/button_down"), true)
	gui.set_enabled(gui.get_node(button .. "/button_up"), false)
end

function init(self)
	-- Hide on-screen controls
	msg.post("main:/controls#gui", "hide_controls")

	-- Font animation
	local dfont = gui.get_node("distancefield")
	local bfont = gui.get_node("bitmap")	
	local scale = 10
	gui.animate(dfont, "scale", vmath.vector3(scale, scale, 0), gui.EASING_INOUTQUART, 8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	gui.animate(bfont, "scale", vmath.vector3(scale, scale, 0), gui.EASING_INOUTQUART, 8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)

	-- Slice 9 button animation
	local slice9 = gui.get_node("slice9")
	gui.animate(slice9, "size.x", 150, gui.EASING_INOUTQUART, 4, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	gui.animate(slice9, "size.y", 150, gui.EASING_INOUTQUART, 3, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)

	-- Pie node
	local pie = gui.get_node("pie")
	gui.animate(pie, "fill_angle", 0, gui.EASING_LINEAR, 3, 0, nil, gui.PLAYBACK_LOOP_FORWARD)
	gui.animate(pie, "rotation.z", 360, gui.EASING_LINEAR, 3, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	gui.animate(pie, "inner_radius", 75, gui.EASING_INOUTSINE, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)

	-- Stenciled/masked cloud
	local cloud = gui.get_node("cloud")
	gui.animate(cloud, "position.x", -300, gui.EASING_INOUTSINE, 10, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	
	-- Dynamically create node
	local imgurl = "http://www.defold.com/static/base/press-kit/Defold-logotypes_RGB-Original_Illustrator-01.png"
	http.request(imgurl, "GET", function(self, id, response)
			local img = image.load(response.response)
			local tx = gui.new_texture("logo", img.width, img.height, img.type, img.buffer)
			local node = gui.new_box_node(vmath.vector3(520, 200, 0), vmath.vector3(img.width, img.height, 0))
			gui.set_texture(node, "logo")
			gui.set_scale(node, vmath.vector3(0.15, 0.15, 1))
		end)

	-- Buttons
	self.buttons = { "button1", "button2", "button3" }
	-- Reset them
	for i, b in pairs(self.buttons) do
		button_unpress(b)
	end
	
	-- Grab input focus so we can react to clicks on buttons.
	msg.post(".", "acquire_input_focus")
end


function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		for i, b in pairs(self.buttons) do
			if gui.pick_node(gui.get_node(b .. "/button_up"), action.x, action.y) then
				button_press(b)
			end
		end
	elseif action_id == hash("click") and action.released then
		-- Reset them
		for i, b in pairs(self.buttons) do
			button_unpress(b)
		end
	end
end


